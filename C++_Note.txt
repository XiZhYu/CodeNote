//C++11标准
//基于Visual Studio Community 2017 -> Visual Studio Community 2019 -> Visual Studio Code

//C++ ----- 类 -----数据成员
//             +----成员函数
//    +---- 函数

//类-交通工具
    //对象1-汽车
	    //数据
	    //属性1-红色
		//属性2-四个轮子
		//...
		//函数
		//操作1-加速
		//操作2-刹车
		//...
    //对象2-自行车
	//...

//定义类name_XZY
class name_XZY
{
  public:
    int a;
    int max(int b, int c);
  private:
    int d;
    int min(int e, int f);
};

//son_name_XZY继承于nameXZY，可以多继承
class son_name_XZY: public nameXZY
{
  public:
    int new_a;
}

//函数模板，有问题！
template <class type_xzy1> type_xzy2 fun_xzy(int a, int b)
//类模板
template <class type_xzy3> type_xzy4 class_xzy{}

//数据类型：
int-整数
int*/int**/int***/...
long-长整数
float-实数
double-高精度的实数
bool-逻辑值

//循环类型----------------------------------------------------------------
//①for循环（基本可全部使用for）
	for (int i = 0; i < 3; i++)
	{
		cout << i << ends;
	}

//②while循环（常用于判断精度是否足够）
	int i = 0;
	do
	{
		cout << i << ends;
		i++;
	} while (i < 3);
//或者
	while (i <3 )
	{
		cout << i << ends;
	}

//③if判断，||-或,&&-与,!-非
	int i = 0;
	if (i < 3)
	{
		cout << "hi" << endl;
	}
	else 	if (i > 5)
			{
				cout << "Hello" << endl;
			}
			else
			{
				cout　<< "NULL" << endl;
			}

//④switch判断
	int i = 1;
	switch (i)
	{
	case 1:
		cout << "Monday" << endl;
		break;
	case 2:
		cout << "Tuesday" << endl;
		break;
	default:
		cout << "Other" << endl;
		break;
	}

	
//头文件---------------------------------------------------------------------
//①输入输出
	#include <iostream>
	using namespace std;
	cin >> i;//从键盘输入读取数据，并赋值给i
	cout << i << "Hi!";//在屏幕上输出i的值,并打出字符Hi!
	ends-空格
	endl-换行
	"\t"-Tab
	"\n"-换行
	"\r\n"-文本里换行

//②字符
	#include <string>
	string a="Hello";

//③数组模板
	#include <vector>
	//模板vector，用于取代数组和指针
	vector<double> a(3,0.0);//一维数组a，三个元素，初值为0.0
	vector<vector<double>> b(3,vector<double>(2,0.0));//二维数组b，3行2列，初值为0.0
	vector<vector<bouble>> c{{1,2,3},{4,5,6},{7,8,9}};//二维数组c，3行3列，
	cout << c[0][0] << endl;//元素操作
	c.push_back(vector<double>(3,10));//c新增第4行，且有三个元素，值为10
	c[0].push_back(11);//c第一行尾新增一个元素，值为11
	a.resize(4);//a重新定义容量为4个元素，新增元素默认为0
	a.clear();//将a清空
	unsigned int bRow = b.size();//b的行数
	unsigned int bCol = b[0].size();//b的列数，注意：数组的不同行可有不同的列数
	for(auto i:c)//快速输出c二维数组的全部元素
	{
		for(auto v:i)
		{
			cout << v << ends;
		}
		cout << endl;
	}

//④数学函数
	#include <math.h>
	double a = sin(3.14);
	double b = pow(3, 2);//乘方
	double c = sqrt(9);//开方

//⑤时间（用于计时）
	#include <time.h>
	long time01 = clock();
	long time02 = clock();
	cout << "It took " << double(time02 - time01) / CLOCKS_PER_SEC << "seconds." << endl << endl;

//⑥文本输入输出
	#include <fstream>
	ifstream objIfs;//创建一个输入输出的操作对象
	objIfs.open(filename, ios_base::in | ios_base::binary);//读入|二进制
	objIfs >> value;//从文本文件中读取一个数并赋值给value
	objIfs.close();
	
	ofstream objOfs;//创建一个输入输出的操作对象
	objOfs.open("Out.txt", ios_base::out | ios_base::binary | ios_base::trunc);//输出|二进制|删除原内容
	objOfs << value;//将value的值输出到文本文件中
	objOfs.close();

	
	
//设置报错机制
	if (条件) 
	{
		cout << "错误位置 错误信息" << endl;
		system("pause"); exit(0);
	}


//&的用法
	//取地址
	//前方有类型则为引用，引用仅为声明，与原变量共用同一内存地址
	//主要用于C++传参，对指针进行包装，防止地址泄露
	//相当于扩展了变量的作用域
	int a = 1234;
	int &r_a = a;//a的外号为r_a
//指针*
	int* a;//"int*"可理解为类型
	int** p_a = &a;
	//开头的“int**”指明类型，*可无限个
//简单点说，&取址时得到地址位置，*得到地址位置所存的数据

	
/*******************************************************************************
静态库lib制作（保护代码）
	原料：matrix.h，matrix.cpp
	matrix的工程属性->配置属性->常规->配置类型->Lib
	运行，文件夹中生成matrix.h和matrix.lib
	将matrix.h和matrix.lib复制到静态库的文件夹ezLib中
	在其他工程中，若要使用静态库，工程属性->C/C++->常规->附加包含目录->ezLib的路径
						->链接器->附加库目录->ezLib的路径
		程序中需加代码：
		#include "matrix.h"
		#include comment(lib,"matrix.h")
*******************************************************************************/

/*******************************************************************************
extern，使各个cpp共享数据的操作权限，同时增加了数据被篡改的风险
	在主控cpp中、main之外定义的数据,如：
		vector<double> a(3,0.0);
	可在其他cpp对应的h文件中用extern加以引用，如：
		extern vector<double> a;
	cpp里即可正常使用
*******************************************************************************/

/*******************************************************************************
实用问题

字符串："abc"
字符：'a'

简单的快速判断	()?():()
	int x = 5;
可多重嵌套使用
	int y = (x > 10) ? (x) :( (x>5) ? (x+1) : (x-1) );

强制转换
	cout << double(1) << endl;
*******************************************************************************/

/*******************************************************************************
c中的printf十分适合控制输出的格式
	printf("%-5c%-5d%-5.2f\n", 'c', 100, 120.0);
	//-为左对齐

C++中比较麻烦
	cout << setiosflags(ios::left) << setw(5) << 'c' << setw(5) << 100 << 
		 setiosflags(ios::fixed) << setprecision(2) << setw(5) << 120.00 << endl;
*******************************************************************************/

/*******************************************************************************
函数重载
	参数类型不同、参数个数不同、类型顺序不同
	在所有一致情况下，不能让返回值不同
	函数重载时不能带默认参数，会出现ambiguous（二义性）
*******************************************************************************/


/*******************************************************************************
Eigen库的使用，矩阵运算
	官网下载，VS中工程右键属性，C/C++附加目录，加入Eigen目录
	#include <Eigen/Eigen>//所有项
	using namespace Eigen;//包括头文件和命名空间
静态
	Matrix2d mat_s;//2*2 double形
动态
	MatrixXd mat_d(n,m);//n*m double形
*******************************************************************************/

/*******************************************************************************
内联函数，优点很多，限制很多
	关键词：inline，不超过5行
*******************************************************************************/

//命名空间
	namespace MySpace
	{
		double x = 10.2;
	}
//调用方法：
//①
	cout << MySpace::x << endl;
//②
	using MySpace::x;cout << x << endl;
//③
	using namespace MySpace;cout << x << endl;



//xiezhuoyu
//mechanics_xzy@163.com
