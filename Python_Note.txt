#代替MATLAB计算与作图


#希腊字母 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
#     α     alpha     ν     nu
#     β     beta      ξ, Ξ  xi
#     γ, Γ  gamma     o     omicron
#     δ, Δ  delta     π, Π  pi
#     ε     epsilon   ρ     rho
#     ζ     zeta      σ, Σ  sigma
#     η     eta       τ     tau
#     θ, Θ  theta     υ, Υ  upsilon
#     ι     iota      φ, Φ  phi
#     κ     kappa     χ     chi
#     λ, Λ  lambda    ψ, Ψ  psi
#     μ     mu        ω, Ω  omega
#希腊字母 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =


#常用包 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
#数学函数包，math
#作图包，matplotlib,https://matplotlib.org/3.1.1/gallery/index.html
#矩阵计算包，numpy
#数值方法包，scipy
#windows-cmd方式安装
  python -m pip list  #查看已安装包
  python -m pip install matplotlib  #安装matplotlib包
    pip --default-timeout=100 install -U numpy  #网络不好时，延长下载响应时间
#linux下载
  sudo apt-get install python3-numpy
  sudo apt-get install python3-matplotlib
#导入包
  import numpy  #导入矩阵计算包
    import numpy as np  #导入包，给别名
    from numpy import linspace  #从numpy包导入linspace函数
  import math  #导入数学计算包
    #数学函数：ceil  exp  fabs  floor  log  log10  max  min  pow  round  sqrt
    #三角函数：sin  cos  tan  asin  acos  atan
    #常用数值：math.pi  math.e
  import random  #导入随机数学计算包
    #随机数函数：random()  seed() random.randint(0.0,1000.0)/1000.0
  import matplotlib.pyplot as plt  #画图-开头固定格式  #导入绘图包，给别名
#常用包 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =


#语法 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
#参考：https://www.runoob.com/python3
#缩进的空格数是可变的，但是同一个代码块的语句必须包含相同的缩进空格数
#奇怪的错误，都源于莫名的空格
#使用反斜杠\或者省略号"..."来实现续行， [], {}, 或 () 中不需要使用
#变量不需要声明
#''和""使用完全相同
#索引值以 0 为开始值，-1 为从末尾的开始位置
#转义字符：\n-换行  \t-横向制表符  \r-回车

#数据类型：数字number、字符串string、列表list、元组tuple、集合set、字典dictionary
#  +  -  *  /  //  %  **
#  加 减 乘 除  商  余 幂
#  ==  !=  >  <  >=  <=

#数字类型：整数int、浮点数float、布尔型bool和复数complex
a = 7
b = 7.7
c = True
d = 7+8j  #numpy中包含了复数运算
print(type(a),"is",a,"\n",type(b),"is",b,"\n",type(c),"is",c,"\n",type(d),"is",d,"\n")

#字符串String
hi = "HELLO lemon!"
print(hi,"\n",hi[0:7:2])  #注意：与MATLAB不同，为“起点：终点：步长”
print(hi[-1::-1])  #倒数，“空”表示数到最后

#列表List，内容可修改
aL = [777, "abc",  7.77, 77+7j]
print(aL[0],aL[1],aL[-1])

#元组Tuple（不要用）
aT = [777, "abc",  7.77, 77+7j]
print(aT[0],aT[1],aT[-1])

#集合Set（不要用）
aS = {777, "abc", 777, 7.77, 77+7j}
print(aS)

#字典Dictionary（不要用）
aD = {"Mon": 1, "Tue":2, "Wed":"wednesday"}
#aD = dict(Mon = 1, Tue = 2, Wed = "wednesday")
print(aD.keys())
print(aD.values())
print(aD["Mon"])

#输入输出
a = input("please enter:")
print("the number is ",a)

#判断语句
a = 10
b = 7
if a > b:
  print(a)
elif a == b:
  print("a=b")
else:
  print(b)

#while循环（可加else）
a = 1
while a <= 3:
  print(a)
  a+=1
print(a)

#for循环(可用break和continue)
for i in np.arange(1,10,2):
  print(i)
#break-结束循环
#continue-跳过此次循环

#矩阵的运算
import numpy as np  #导入包，给别名
a = np.zeros((3,3))  #全0矩阵
b = np.ones((3,3))  #全1矩阵
d = np.eye(3,3) * 10  #对角线矩阵
c = np.mat([[1,2,3],[4,5,6],[7,8,10]])  #创建mat矩阵
np.shape(c)  #矩阵行列数
np.multiply(c,c)  #点乘
c.T  #转置
c.I  #逆
np.linalg.matrix_rank(c)  #秩
np.linalg.det(c)  #行列式
np.trace(c)  #迹
np.sum(c[:,0])  #:符号，求和
np.max(c)  #最值
np.argmax(c)  #最值ID
np.vstack((c,c))  #纵向扩展
np.hstack((c,c))  #横向扩展
np.size(c,0)  #列数
np.size(c,1)  #行数
np.delete(c,i,j)  #删除数组c第j维的第i层数据
np.argsort(c)  #排序
#语法 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =


#作图 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
#plot/plt、figure/fig与axes/ax
#figure-画布（多个图的所有元素）
#axes-单个图的所有元素（title\grid\legend\line\markers\label）
#plot-整合了许多功能

#作图时可以显示中文
from matplotlib.pylab import mpl
mpl.rcParams['font.sans-serif'] = ['SimHei']   #显示中文
mpl.rcParams['axes.unicode_minus']=False       #显示负号

#标注：直接使用Tex格式（注意：是斜体）
r'$\alpha_{11}>\beta^{23}$'  #r$...$格式

#二维数据表达 - - - - - - - - - - - - - - - - - - - -
#数据最好不依赖颜色区分
  color='red'
  color=(1.0,0.0,0.0)
#间断性数据marker=''
  # 1 +
  # ^ o
  # ^ s o
  # ^ s * o
  #空心处理，mfc='none'即markerFaceColor为空白，多个标记重叠时，空心可以很好的区分
  #边界颜色，mec='black'即markerEdgeColor为黑色
  .-点;o-圆；v-三角形；^-三角形；s-正方形；p-五边形；*-星型；h-六边形；H-六边形；D-钻石型
#连续性数据linestyle=''
  # -- -
  # -. -- -
  # : -. -- -
  # dotted dashdot dashed solid
#二维数据表达 - - - - - - - - - - - - - - - - - - - -

#二维图 - - - - - - - - - - - - - - - - - - - -
x = np.linspace(-3,3,100)
y1 = 2*x + 1
y2 = x**2
plt.figure(figsize=(5,5))  #创建一个figure，给定长宽
line1, = plt.plot(x,y1,color='red',linewidth=1.0,linestyle='--',marker='^',markersize=5,markevery=5,mfc='none')
line2, = plt.plot(x,y2,color='blue',linewidth=1.0,linestyle='-.',marker='o',markersize=5,markevery=5,mfc='none')
plt.title('frequency domain',fontsize=9,color='black')  #标题
plt.xlabel('x')  #x轴标签
plt.ylabel('y')  #y轴标签
plt.grid(linestyle = "--")  #设置背景网格线为虚线
plt.xlim((-1,2))  #x轴区间
plt.ylim((-2,3))  #y轴区间
plt.xticks(np.linspace(-2,2,11))  #指定x轴间隔
plt.yticks([-1,0,1,2,3],['a','b','c','d','e'])  #用词汇代替数值
plt.text(-1,2,r'$The\ text$',fontdict={'size':'16','color':'red'})  #在(-1,2)添加文本
plt.legend(handles=[line1,line2],labels=['LINE1','LINE2'],loc='best')  #对应线加图例
plt.savefig('test.pdf',format='pdf')  #保存图片，后期pdf to emf omline
plt.tight_layout()  #紧凑点，可以自动使图像的标签完全显示
plt.show()  #显示图像
#二维图 - - - - - - - - - - - - - - - - - - - -

#二维图进阶 - - - - - - - - - - - - - - - - - - - -
x = np.linspace(-3,3,100)
y1 = 2*x + 1
y2 = x**2
fig, ax = plt.subplots(3,2,figsize=(10,5))  #指定fig和ax，3*2个子图，长宽指定
line1, = ax[0,0].plot(x,y1,color='red',linewidth=1.0,linestyle='--',marker='^',markersize=5,markevery=5,mfc='none')  #取(0,0)的axes，该线给名字line1，方便后面给legend
line2, = ax[0,0].plot(x,y2,color='blue',linewidth=1.0,linestyle='-.',marker='o',markersize=5,markevery=5,mfc='none')
ax[0,0].set_title('Title',fontsize=18)  #标题
ax[0,0].set_xlabel('xlabel', fontsize=18,fontstyle='italic',position=(0.5,0.0))  #x轴
ax[0,0].set_ylabel('ylabel', fontsize=18,fontstyle='oblique',position=(0.0,0.5))  #y轴
ax[0,0].legend(handles=[line1,line2],labels=['LINE1','LINE2'],loc='best')  #legend
ax[0,0].grid(which='major',linestyle = "--",axis="both")      #设置背景网格线为虚线
ax[0,0].set_xlim((-1,2))  #x轴区间
ax[0,0].set_ylim((-2,3))  #y轴区间
ax[0,0].xaxis.set_ticks(np.linspace(-2,2,11))  #指定x轴间隔
ax[0,0].yaxis.set_ticks([-1,0,1,2,3])  #指定y轴间隔
ax[0,0].yaxis.tick_right()  #右侧显示   
ax[0,0].spines['right'].set_color('none')  #右边框颜色
ax[0,0].spines['top'].set_color('none')
ax[0,0].xaxis.set_ticks_position('bottom')  #x轴与下边框匹配
ax[0,0].yaxis.set_ticks_position('left')
ax[0,0].spines['bottom'].set_position(('data',0))  #下边框放到y=0处
ax[0,0].spines['left'].set_position(('data',0))  #左边框放到x=0处
ax[0,0].text(-1,2,r'$The\ text$',fontdict={'size':'16','color':'red'})  #在(-1,2)添加文本
plt.tight_layout()  #紧凑点，可以自动使图像的标签完全显示
fig.savefig('C:\\Users\\zhuoyu\\Pictures\\test.png', dpi=600)  #曲线图600，云图1000
plt.show()  #显示图像
#二维图进阶 - - - - - - - - - - - - - - - - - - - -

#散点图 - - - - - - - - - - - - - - - - - - - -
x = np.random.normal(0,1,500)  #生成500个随机数
y = np.random.normal(0,1,500)
plt.figure(figsize=(5,5))  #创建一个figure，给定长宽
plt.scatter(x,y,s=50,color='blue',alpha=0.5)  #尺寸50，透明度0.5！！！
plt.show()
#散点图 - - - - - - - - - - - - - - - - - - - -

#直方图 - - - - - - - - - - - - - - - - - - - -
x = np.linspace(0,9,10)
y = 2**x + 10
plt.figure(figsize=(5,5))  #创建一个figure，给定长宽
plt.bar(x,y,facecolor='blue',edgecolor='none')
#直方图 - - - - - - - - - - - - - - - - - - - -

#等高线图 - - - - - - - - - - - - - - - - - - - -
def f(x,y):
  return (1-x/2+x**5+y**3)*np.exp(-x**2-y**2)  #高度函数
x = np.linspace(-3,3,100)
y = np.linspace(-3,3,100)
X,Y = np.meshgrid(x,y)  #网格式生成布点
plt.figure(figsize=(5,5))  #创建一个figure，给定长宽
plt.contourf(X,Y,f(X,Y),8,alpha=0.75,cmap=plt.cm.hot)  #彩色图
C = plt.contour(X,Y,f(X,Y),8,colors='black',linewidth=0.5)  #等高线
plt.clabel(C,inline=True,fontsize=10)  #等高线数值的标注
plt.xticks(())  #不需要x轴的数值显示
plt.yticks(())
plt.show()
#等高线图 - - - - - - - - - - - - - - - - - - - -

#3D图形 - - - - - - - - - - - - - - - - - - - -
#https://matplotlib.org/3.1.1/gallery/mplot3d/surface3d.html#sphx-glr-gallery-mplot3d-surface3d-py
from mpl_toolkits.mplot3d import Axes3D
from matplotlib import cm
from matplotlib.ticker import LinearLocator, FormatStrFormatter
fig = plt.figure(figsize=(8,5))
ax = fig.gca(projection='3d')
X = np.arange(-5, 5, 0.25)
Y = np.arange(-5, 5, 0.25)
X, Y = np.meshgrid(X, Y)
Z = np.sin(np.sqrt(X**2 + Y**2))
surf = ax.plot_surface(X, Y, Z, cmap=cm.jet)
ax.set_zlim(-1.01, 1.01)
ax.zaxis.set_major_locator(LinearLocator(10))
ax.zaxis.set_major_formatter(FormatStrFormatter('%.02f'))
fig.colorbar(surf, shrink=0.5, aspect=5)
plt.show()
#3D图形 - - - - - - - - - - - - - - - - - - - -

#局部放大图 - - - - - - - - - - - - - - - - - - - -
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.axes_grid1.inset_locator import mark_inset
from mpl_toolkits.axes_grid1.inset_locator import inset_axes
# 准备数据
x = np.linspace(-0.1*np.pi, 2*np.pi, 30)
y_1 = np.sinc(x)+0.7
# 绘图
fig, ax = plt.subplots(1, 1, figsize=(6, 4))
ax.plot(x, y_1, color='k', linestyle=':', linewidth=1,
        marker='o', markersize=5,
        markeredgecolor='black', markerfacecolor='C0')
ax.legend(labels=["y_1"], ncol=1)
# 嵌入绘制局部放大图的坐标系
axins = inset_axes(ax, width="22%", height="25%",loc='lower left',
                   bbox_to_anchor=(0.75, 0.075, 1, 1),
                   bbox_transform=ax.transAxes)
# 在子坐标系中绘制原始数据
axins.plot(x, y_1, color='k', linestyle=':', linewidth=1,
            marker='o', markersize=5,
            markeredgecolor='black', markerfacecolor='C0')
# 调整子坐标系的显示范围
axins.set_xlim(12.8, 13.25)
axins.set_ylim(0.020, 0.027)
# 建立父坐标系与子坐标系的连接线
# loc1 loc2: 坐标系的四个角-1 (右上) 2 (左上) 3(左下) 4(右下)
mark_inset(ax, axins, loc1=2, loc2=1, fc="none", ec='k', lw=1)
# 显示
plt.show()
#局部放大图 - - - - - - - - - - - - - - - - - - - -

#小功能
#箭头标注
ax.annotate("is arrow",xy=(1.0,0.1),xytext=(2.0,0.1),arrowprops=dict(arrowstyle="<->", color="black"))
#作图 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =


#文本数据的输入输出 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
#文本写入
f = open("/data.txt",mode="w")  #打开，只写
f.write("HELLO!\nWORLD!!\n")  #写入内容
f.close()  #关闭文件
#数组输出至文本
np.savetxt("data.txt",data)

#不规则文本数据提取
f = open("/data.txt",mode="r")  #打开，只读
#方法1
str = f.read()  #整体存在string
#方法2
list = f.readlines()  #按行存为list
listTemp = list[4:8:1]  #读取固定行数的数据
listToArray = np.loadtxt(listTemp)  #将list数据转换为array数据（具有相同列数）  listToArray = np.loadtxt(f.readlines()[4:8:1])
f.close()

#规则文本数据读取
fX = open('X.txt',mode='r')  #打开数据文件文件
X = np.loadtxt('X.txt')  #参数(fname, dtype=, comments='#', delimiter=None, converters=None, skiprows=0, usecols=None, unpack=False, ndmin=0)
fX.close()

#数据查找
list.startswith("This is comments:", beg=0,end=20)  #判断list是否以"This is comments:"开头，是则为true，否则为false
list.endswith("This is comments:", beg=0,end=20)  #判断list是否以"This is comments:"结尾，是则为true，否则为false
list.find("This is comments:", beg=0,end=20)  #判断list是否包含"This is comments:"，是则为索引值，否则为-1
#文本数据的输入输出 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =


#数据处理 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
from scipy import interpolate  #插值包
x = np.linspace(1,100,20)
y = np.sin(x)
f = interpolate.interp1d(x, y, kind="cubic")  #'nearest'最近, 'zero','slinear','linear'线性,'quadratic'二阶B样条,'cubic'三阶B样条
interX = np.linsapce(1,100,100)
interY = f(interX)
#数据处理 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =

#UBUNTU下运行python程序 = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
python3 xzy_name.py
python3 xzy_name.py argv1 argv2  #使用命令行参数传参
  xzy_name.py中：
    import sys  #命令行参数
    a = str(sys.argv[0])  #指xzy_name.py
    b = sys.argv[1]  #指argv1
    c = sys.argv[2]  #指argv1
#UBUNTU下运行python程序 = = = = = = = = = = = = = = = = = = = = = = = = = = = = =

#mechanics_xzy@163.com
#XieZhuoYu
