#代替MATLAB计算与作图
#基于matplotlib包,https://matplotlib.org/3.1.1/gallery/index.html

#希腊字母=============================================================
#	α alpha			ν nu
#	β beta			ξ, Ξ xi
#	γ, Γ gamma		o omicron
#	δ, Δ delta 		π, Π pi
#	ε epsilon 		ρ rho
#	ζ zeta 			σ, Σ sigma
#	η eta 			τ tau
#	θ, Θ theta 		υ, Υ upsilon
#	ι iota 			φ, Φ phi
#	κ kappa 		χ chi
#	λ, Λ lambda 	ψ, Ψ psi
#	μ mu 			ω, Ω omega
#希腊字母=============================================================

#计算包= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
#cmd方式安装
  python -m pip list  #查看已安装包
  python -m pip install matplotlib  #安装matplotlib包
#常见包
  numpy-矩阵计算包
  math-数学函数包
  matplotlib-作图包
  scipy-数值方法包
#导入包
  import numpy  #导入矩阵计算包
  from numpy import linspace  #numpy包导入linspace函数
  import math  #导入数学计算包
    #数学函数：ceil  exp  fabs  floor  log  log10  max  min  pow  round  sqrt
    #三角函数：sin  cos  tan  asin  acos  atan
    #常用数值：math.pi  math.e
  import random  #导入随机数学计算包
    #随机数函数：random()  seed()
#画图-开头固定格式
  import matplotlib.pyplot as plt  #导入绘图包，给别名
  import numpy as np  #导入包，给别名
#计算包= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =

#语法=====================================================================
#参考：https://www.runoob.com/python3
#缩进的空格数是可变的，但是同一个代码块的语句必须包含相同的缩进空格数
#奇怪的错误，都源于莫名的空格
#使用反斜杠\或者省略号"..."来实现续行， [], {}, 或 () 中不需要使用
#变量不需要声明
#''和""使用完全相同
#索引值以 0 为开始值，-1 为从末尾的开始位置
#转义字符：\n-换行  \t-横向制表符  \r-回车

#数据类型：数字number、字符串string、列表list、元组tuple、集合set、字典dictionary
#  +  -  *  /  //  %  **
#  加 减 乘 除  商  余 幂
#  ==  !=  >  <  >=  <=

#数字类型：整数int、浮点数float、布尔型bool和复数complex
a = 7
b = 7.7
c = True
d = 7+8j
print(type(a),"is",a,"\n",type(b),"is",b,"\n",type(c),"is",c,"\n",type(d),"is",d,"\n")

#字符串String
hi = "HELLO lemon!"
print(hi,"\n",hi[0:7:2])  #注意：与MATLAB不同，为“起点：终点：步长”
print(hi[-1::-1])  #倒数，“空”表示数到最后

#列表List，内容可修改
aL = [777, "abc",  7.77, 77+7j]
print(aL[0],aL[1],aL[-1])

#元组Tuple
aT = [777, "abc",  7.77, 77+7j]
print(aT[0],aT[1],aT[-1])

#集合Set
aS = {777, "abc", 777, 7.77, 77+7j}
print(aS)

#字典Dictionary
aD = {"Mon": 1, "Tue":2, "Wed":"wednesday"}
#aD = dict(Mon = 1, Tue = 2, Wed = "wednesday")
print(aD.keys())
print(aD.values())
print(aD["Mon"])

#输入输出
a = input("please enter:")
print("the number is ",a)

#判断语句
a = 10
b = 7
if a > b:
  print(a)
elif a == b:
  print("a=b")
else:
  print(b)

#while循环（可加else）
a = 1
while a <= 3
  print(a)
  a+=1
print(a)

#for循环(可用break和continue)
for i in np.arange(1,10,2):
  print(i)

#矩阵的运算
a = np.zeros((3,3))  #全0矩阵
b = np.ones((3,3))  #全1矩阵
d = np.eye(3,3) * 10  #对角线矩阵
c = np.mat([[1,2,3],[4,5,6],[7,8,10]])  #创建mat矩阵
print(np.shape(c))
print(np.multiply(c,c))  #点乘
print(c.T)  #转置
print(c.I)  #逆
print(np.linalg.matrix_rank(c))  #秩
print(np.linalg.det(c))  #行列式
print(np.trace(c))  #迹
print(np.sum(c[:,0]))  #:符号
print(np.max(c))  #最值
print(np.argmax(c))  #最值ID
print(np.vstack((c,c)))  #纵向扩展
print(np.hstack((c,c)))  #横向扩展
#语法=====================================================================

#二维数据表达=============================================================
#数据最好不依赖颜色区分
#间断性数据marker=''
  # 1 +
  # ^ o
  # ^ s o
  # ^ s * o
  #空心处理，mfc='none'即markerFaceColor为空白
  #边界颜色，mec='black'即markerEdgeColor为黑色
#连续性数据linestyle=''
  # -- -
  # -. -- -
  # : -. -- -
  # dotted dashdot dashed solid
#二维数据表达=============================================================

#CASE1====================================================================
x = np.linspace(-3,3,100)
y1 = 2*x + 1
y2 = x**2

plt.figure(figsize=(5,5))  #创建一个figure，给定长宽

line1, = plt.plot(x,y1,color='red',linewidth=1.0,linestyle='--',marker='^',markersize=5,markevery=5,mfc='none')
line2, = plt.plot(x,y2,color='blue',linewidth=1.0,linestyle='-.',marker='o',markersize=5,markevery=5,mfc='none')

plt.xlabel('x')  #x轴标签
plt.ylabel('y')

plt.grid(linestyle = "--")      #设置背景网格线为虚线

plt.xlim((-1,2))  #x轴区间
plt.ylim((-2,3))

plt.xticks(np.linspace(-2,2,11))  #指定x轴间隔
plt.yticks([-1,0,1,2,3],
           ['a','b','c','d','e'])  #用词汇代替数值
		   
ax = plt.gca()  #获取当前坐标轴
ax.spines['right'].set_color('none')  #右边框颜色
ax.spines['top'].set_color('none')
ax.xaxis.set_ticks_position('bottom')  #x轴与下边框匹配
ax.yaxis.set_ticks_position('left')
ax.spines['bottom'].set_position(('data',0))  #下边框放到y=0处
ax.spines['left'].set_position(('data',0))  #左边框放到x=0处

plt.text(-1,2,r'$The\ text$',fontdict={'size':'16','color':'red'})  #在(-1,2)添加文本

plt.legend(handles=[line1,line2],labels=['LINE1','LINE2'],loc='best')  #对应线加图例

plt.savefig('test.pdf',format='pdf')  #保存图片，后期pdf to emf omline

plt.tight_layout()  #紧凑点，可以自动使图像的标签完全显示
plt.show()  #显示图像
#CASE1====================================================================

#散点图
x = np.random.normal(0,1,500)  #生成500个随机数
y = np.random.normal(0,1,500)
plt.figure(figsize=(5,5))  #创建一个figure，给定长宽
plt.scatter(x,y,s=50,color='blue',alpha=0.5)  #尺寸50，透明度0.5
plt.show()

#直方图
x = np.linspace(0,9,10)
y = 2**x + 10
plt.figure(figsize=(5,5))  #创建一个figure，给定长宽
plt.bar(x,y,facecolor='blue',edgecolor='none')

#等高线图
def f(x,y):
  return (1-x/2+x**5+y**3)*np.exp(-x**2-y**2)  #高度函数
x = np.linspace(-3,3,100)
y = np.linspace(-3,3,100)
X,Y = np.meshgrid(x,y)  #网格式生成布点
plt.figure(figsize=(5,5))  #创建一个figure，给定长宽
plt.contourf(X,Y,f(X,Y),8,alpha=0.75,cmap=plt.cm.hot)  #彩色图
C = plt.contour(X,Y,f(X,Y),8,colors='black',linewidth=0.5)  #等高线
plt.clabel(C,inline=True,fontsize=10)  #等高线数值的标注
plt.xticks(())  #不需要x轴的数值显示
plt.yticks(())
plt.show()

#3D图形===================================================================
#https://matplotlib.org/3.1.1/gallery/mplot3d/surface3d.html#sphx-glr-gallery-mplot3d-surface3d-py
from mpl_toolkits.mplot3d import Axes3D
from matplotlib import cm
from matplotlib.ticker import LinearLocator, FormatStrFormatter

fig = plt.figure(figsize=(8,5))
ax = fig.gca(projection='3d')
X = np.arange(-5, 5, 0.25)
Y = np.arange(-5, 5, 0.25)
X, Y = np.meshgrid(X, Y)
Z = np.sin(np.sqrt(X**2 + Y**2))
surf = ax.plot_surface(X, Y, Z, cmap=cm.jet)
ax.set_zlim(-1.01, 1.01)
ax.zaxis.set_major_locator(LinearLocator(10))
ax.zaxis.set_major_formatter(FormatStrFormatter('%.02f'))
fig.colorbar(surf, shrink=0.5, aspect=5)
plt.show()
#3D图形===================================================================


#文本数据的输入输出=======================================================
f = open("/data.txt","w")  #打开，只写
f.write("HELLO!\nWORLD!!\n")  #写入内容
f.close()  #关闭文件

f = open("/data.txt","r")  #打开，只读
str = f.read()  #读取数据
print(str)
f.close()

#txt数据读取
fX = open('X.txt','r')  #打开数据文件文件
X = np.loadtxt('X.txt')
fY = open('Y.txt','r')  #打开数据文件文件
Y = np.loadtxt('Y.txt')
fZ = open('Z.txt','r')  #打开数据文件文件
Z = np.loadtxt('Z.txt')
fX.close()
fY.close()
fZ.close()
#文本数据的输入输出=======================================================

#标注=====================================================================
#直接使用Tex格式
r'$\alpha_1>\beta^2$'  #r$...$格式
#注意：是斜体
#标注=====================================================================

#UBUNTU下运行python程序===================================================
sudo apt-get install python3-numpy
sudo apt-get install python3-matplotlib
python3 xzy_name.py
#UBUNTU下运行python程序===================================================

#mechanics_xzy@163.com
#XieZhuoYu