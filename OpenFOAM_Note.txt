// = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
OpenFOAM-7

OpenFOAM-v1912安装
官方在Ubuntu 16.04 LTS通过测试
预先安装依赖项：
    sudo apt-get update
    sudo apt-get install build-essential flex bison cmake zlib1g-dev libboost-system-dev libboost-thread-dev libopenmpi-dev openmpi-bin gnuplot libreadline-dev libncurses-dev libxt-dev
    sudo apt-get install qt4-dev-tools libqt4-dev libqt4-opengl-dev freeglut3-dev libqtwebkit-dev
并行MPI相关：
    sudo apt-get install libscotch-dev libcgal-dev
在恰当位置，解压压缩包：
    tar -xzf OpenFOAM-v1912.tgz
    tar -xzf ThirdParty-v1912.tgz
若非默认安装位置，需要更改etc/bashrc.中的安装路径和个人路径（基本上$HOME都得改）
在$HOME/.bashrc尾加（多版本需要注意不同）：
    source ~/OpenFOAM/OpenFOAM-v1912/etc/bashrc
编译：
    编译ParaView（7小时，建议睡一觉）
        cd $WM_THIRD_PARTY_DIR
    <（安装失败可能为dash/bash问题，cd,ls -l /bin/sh）
    在makeParaView脚本第一行：#!/bin/bash
    选项，否为bash，是为dash：sudo dpkg-reconfigure dash>
        ./makeParaView
    CGAL相关 etc/config.sh/CGAL 
        cgal_version=CGAL-4.9.1
    Boost相关 etc/config.sh/CGAL
        boost_version=boost-system
        boost_version=boost_1_64_0
    编译OpenFOAM（7小时，建议睡一觉）
        foamSystemCheck
        foam
        ./Allwmake
查看是否安装成功：
    foamInstallationTest
创建个人目录并复制算例文件：
    mkdir -p $FOAM_RUN
    cd $FOAM_RUN
    cp -r ../../OpenFOAM-v1912/tutorials .

多版本共存
gedit $HOME/.bashrc
alias of7="source /media/xiezhuoyu/DATA/b_EZ/n_OpenFOAM/OpenFOAM-7/etc/bashrc"
alias of1912="source /media/xiezhuoyu/DATA/b_EZ/n_OpenFOAM/OpenFOAM-v1912/etc/bashrc"
以后新开命令窗口，先输入（指定）of7或of1912即调用指定版本
// = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =


// = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
CFD经验
1.网格尺寸
    波长方向网格尺寸：lambda/20~lambda/200，lambda/60
    波高方向网格尺寸：H/4~H/20，H/10
    时间步长：T/500~T/1000，T/1000
    水深方向，半个波长范围内适当加密
    细长比很重要，不能超过1:20，1:1最好
2.造波消波
    消波区域尺寸：1.0*lambda~2.0*lambda，波陡大，消波区长
    二阶时间离散格式，有利于抑制波幅衰减，但是后期WSI可能计算不稳定
    层流效果优于湍流
3.重叠网格
    overset区域尽可能大，至少5层网格，方便插值
    overset尺寸和背景网格尺寸尽可能一致
    尽可能设置边界层网格
4.壁面函数与Y+
    k-omega SST建议Y+在30～300之间，尽可能控制在100附近
    随着波浪发展，浮体附近流速变大，Y+会变小，所以计算初期的Y+可以在800左右
    适当增大湍流系数，从结果上来看，可以增大Y+
    边界层网格应当是细长的，即y+方向短一点，沿壁面方向长一点，而不是单纯加密壁面处的网格
5.离散格式
    div(rhophi,U) upwind;有利于波形保持
CFD问题
1.如何引入坐标系，直接旋转浮体网格，后期也可以直接得到船体坐标系的纵摇角。
// = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =


// = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
常用环境变量
    $FOAM_RUN  //个人目录，别名：run
    $FOAM_SRC  //源文件，别名：src
    $FOAM_TUTORIALS  //案例文件，别名：tut
    env | grep "OpenFOAM"  //查看所有环境变量
    alias | grep "FOAM"  //查看所有别名
常见命名
    alpha-体积分数
    alpha.water-水的体积分数
    p_rgh-非静压，p_rgh=p-rho*g*h
    U-速度
    k-湍动能
    epsilon-湍流耗散率
    omega-
    nuTilda-SA模型参数
    nut-湍流涡粘性洗漱
    *Final-指循环中*的倒数第一次计算（一般有更多的计算量）
    “U.*”-*表示任意字符
    volScalarField-体标量场
    volVectirField-体矢量场
    fvScalarMatrix-标量矩阵
    autoPtr-OpenFOAM特有的智能指针
    phi-通量
    Phi-速度势
其他
    sqr-平方
    sqrt-开平方
// = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =

// = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
窗口命令
常见算例运行流程
    blockMesh  //网格
    setFields  //初始化场
    renumberMesh -overwrite  //优化网格编号，使对角占优
    checkMesh  //检查网格
    decomposePar  //区域分解
    interFoam  //求解器
        interFoam -postprocess system/controlDict  //仅执行后处理部分函数
    reconstructPar -time 2.0:  //合并区域
    paraFoam  //可视化
        paraFoam -builtin
        paraFoam -builtin -case fileName  //可视化指定目录下CASE
	foamToVTK  //转换成paraview格式
帮助
    blockmesh -help
文本编辑
    gedit name_xzy
    code name_xzy
文本显示
    more name-xzy
并行计算
    decomposePar  //区域分解
    reconstructPar  //合并区域
    mpirun -np 2 interFoam -parallel  //采用2核并行计算
        reconstructPar
    mpirun -np 4 snappyHexMesh -parallel -overwrite  //网格并行
        reconstructParMesh -constant
    mpirun -np 4 checkMesh -parallel -latesttime  //并行检查
搜索信息
    find -type d -name "name_xzy"  //在当前文件夹中，搜索名字中包含name_xzy的directory
    grep -r -n "name_xzy"  //在当前文件夹中，搜索文本内容包含name_xzy的文本，并显示该行文本
        grep -r -n "name_xzy" -A 3 -B 3  //显示前3行和后3行
保留运算信息
    interFoam | tee log.interFoam  //执行interFoam，并记录到log.interFoam中
    blockMesh | tee log.blockMesh  //log.+命令名称
代码参数化
    length 10;
    width 5;
    ($length $width 0.0);  //宏-Macro
    re #calc "$length*$width";  //inline calculation，执行起来耗时长
提取log文件中的数据，用于后处理
    foamLog log.interFoam  //该命令只能提取固定的变量
    grep xzy_name1 log.interFoam | awk -F "xzy_name2" '{print $xzy_i1}'|awk -F "xzy_name3" '{print $xzy_i2}' >time
    //针对log.interFoam中含有xzy_name1的每一行，按xzy_name2分成若干列，取第xzy_i1列，得到文本，再按xzy_name3分成若干列，取第xzy_i2列，得到文本，可以重复
    //应用：提取浮体重心位移
        grep "Centre of mass" log.overInterDyMFoam | awk -F "(" '{print $2}' | awk -F ")" '{print $1}' > displacement  //提取位移
        grep "^Time =" log.overInterDyMFoam | awk -F "=" '{print $2}' >time  //提取时间
        paste time displacement | awk '{print $1"\t"$2"\t"$3"\t"$4}' >timeDisplacement  //将time和displacement合并，并取出1、3、4、5列
            paste time displacement >timeDisplacement  //更直接
    //应用：提取浮体方向
        grep "Orientation" log.overInterDyMFoam | awk -F "(" '{print $2}' | awk -F ")" '{print $1}' > orientation  //提取位移
        grep "^Time =" log.overInterDyMFoam | awk -F "=" '{print $2}' >time  //提取时间
        paste time orientation >timeOrientation  //更直接
清理
    foamCleanTutorials  //清楚计算结果文件
        foamCleanPolyMesh  //清除网格文件
        foamListTimes -rm  //清除时间文件
复制算例(0\constant\system)
    foamCloneCase A B  //针对FSI算例不好使
如何确认参数选项
    startFrom banana;  //保证“banana”不出现在src中即可，OpenFOAM会报错，提示startFrom的正确选项有哪些
场的映射（势流结果，映射至，粘流初始场）
    mapfields 映射源地址 -consistent -nonFunctionObjects -mapMethod cellPointInterpolate -sourceTime 0
输出
    os-输出到文件
    Info-输出到终端
试错法，测试参数所有选项
    method  banana;  //程序会报错，提示可用选项
// = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =

// = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
数据处理
运行时处理数据，在system/controDict中加入functionObjects，输出文件在postprocessing/function_xzy中
    functions
    {
        function_xzy
        { 
            type forces;
            functionObjectLibs("libforces.so");
            enabled true;
            log true;
            writeControl timeStep;
            writeInterval 1;
            ...
        }
        function2_xzy
        {
            ...
        }
    }
    如果计算已完成，想基于结果处理数据，可以
        1 在controlDict中新增functionObjects(很好用！！)
          interFoam -postProcess -dict system/controlDict -noZero (/-time 500:2000 / latestTime)
        2 将functionObjects单独写在system中
          interFoam -postProcess -dict system/function_add -noZero (/-time 500:2000 / latestTime)
运行后采集数据，使用sampling
    postProcess -func sampleDict -noZero  //沿线采集数据
        sampleDict
    postProcess -func probesDic -noZero  //探针（按点）采集数据
        probesDict
场操作
    postProcess -list  //列出工具名单
    1 postProcess -func vorticity
    2 rhoPimpleFoam -postProcess -func MachNo  //计算涉及结果文件不包含的参数（如粘性系数等），需要加上求解器名称
    3 postProcess -func 'grad(U)'
查看后处理命令
    postProcess -list
监控残差
    find $FOAM_ETC -name residuals  //找到残差设置文本
    cp path/residuals ./system/  //复制到算例文件中，并修改
    functions
    {
        #includeFunc residuals
    }
    foamMonitor -l postProcessing/residuals/0/residuals.dat  //作图，在求解时运行！
// = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =

// = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
0
边界类型，system/blockMeshDict中的边界类型为本质类型，如"type wall"，0/U中的边界类型为数值类型，如"type fixedValue"，两者需要一一对应
本质边界类型
    wall
常见数值边界类型
    基本类型
        fixedValue
        fixedGradient
        zeroGradient
        calculated
        mixed
        directionMixed
        noSlip
        empty
    衍生类型
        totalPressure  //处理回流，针对P
        inletOutlet  //向外zeroGradient，向内fixedValue，针对alpha
        pressureInletOutletVelocity  //处理回流，针对U
        fixedFluxPressure  //考虑重力等体积力，替代zeroGradient，自行调节压力梯度，针对P
列举可用的边界条件类型
    overInterDyMFoam -listScalarBCs -listVectorBCs
查看壁面函数类型
    find $FOAM_SRC/TurbulenceModels -name wallFunctions

自定义初值、边界条件：1.codeStream;2.C++编程
codeStream生成的代码在dynamicCode里面
0.orig/U文件
方法一
inlet
{
  type fixedValue;
  value #codeStream  //value值来自codeStream
  {
    codeInclude
    #{
      #include "fvCFD.H"  //大框架
    #};
    codeOptions
    #{
      -I$(LIB_SRC)/finiteVolume/lnInclude \
      -I$(LIB_SRC)/meshTools/lnInclude
    #};
    codeLibs
    #{
      -lmeshTools \
      -lfiniteVolume
    #};
    code
    #{
      const IOdictionary& d = static_cast<const IOdictionary&>
      (
        dict.parent().parent()  //0.orig -> background
      );
      const fvMesh& mesh = refCast<const fvMesh>(d.db());  //网格database
      const label id = mesh.boundary().findPatchID("inlet");  //网格对应的边界ID
      const fvPatch& patch = mesh.boundary()[id];  //边界网格
      vectorField U(patch.size(), vector(0, 0, 0))  //定义速度场：边界单元数目，vector类型，且初始化为0
      const scalar pi = constant::mathematical::pi;  //常数PI
      forAll(U, i) //equivalent to for (int i=0; patch.size()<i; i++)  //边界所有单元面
      {
        const scalar x = patch.Cf()[i][0];  //边界单元x坐标 patch center face
        const scalar y = patch.Cf()[i][1];  //边界单元y坐标 patch center face
        const scalar z = patch.Cf()[i][2];  //边界单元z坐标 patch center face
        U[i] =  vector(-1.0*(pow(z/0.5, 2) + pow((y-0.5)/0.5,2) - 1.0), 0.0, 0.0);  //速度边界表达式
      }
      U.writeEntry("", os);  //输出U
    #};
  };
}
方法二
inlet
{
  type codedFixedValue;  //衍生于codeStream
  value uniform (0 0 0);
  redirectType name_of_BC_XZY;
  codeOptions
  #{
    -I$(LIB_SRC)/finiteVolume/lnInclude \
    -I$(LIB_SRC)/meshTools/lnInclude
  #};
  codeInclude
  #{
    #include "fvCFD.H"
    #include <cmath>
    #include <iostream>
  #};
  code
  #{
    const fvPatch& boundaryPatch = patch();  //该边界
    const vectorField& Cf = boundaryPatch.Cf();  //边界单元面
    vectorField& field = *this;  //场
    scalar U_0 = 2, p_ctr = 8, p_r = 8;  //某常数
    scalar t = this->db().time().value();  //时间信息！！
    forAll(Cf, faceI)  //边界所有单元面
    {
      field[faceI] = vector(sin(t)*U_0*(1-(pow(Cf[faceI].y()-p_ctr,2))/(p_r*p_r)),0,0);  //边界条件表达式
    }
  #};
}

初值条件
0.orig/alpha.water文件
internalField #codeStream
{
  {
    codeInclude
    #{
      #include "fvCFD.H"
    #};
    codeOptions
    #{
      -I$(LIB_SRC)/finiteVolume/lnInclude \
      -I$(LIB_SRC)/meshTools/lnInclude
    #};
    codeLibs
    #{
      -lmeshTools \
      -lfiniteVolume
    #};
    code
    #{
      const IOdictionary& d = static_cast<const IOdictionary&>(dict);
      const fvMesh& mesh = refCast<const fvMesh>(d.db());
      scalarField alpha(mesh.nCells(), 0.0);
      scalar he = 0.5;
      scalar ke = 0.5;
      scalar ae = 0.3;
      scalar be = 0.15;
      forAll(alpha, i)
      {
        const scalar x = mesh.C()[i][0];
        const scalar y = mesh.C()[i][1];
        const scalar z = mesh.C()[i][2];
        if ( pow(y-ke,2) <= ((1 - pow(x-he,2)/pow(ae,2) )*pow(be,2)) )  #在该区域内设置为水相
        {
          alpha[i] = 1.0;
        }
      }
      alpha.writeEntry("", os);
    #};
  };
}
// = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =

// = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
system/blockMeshDict
结点ID顺序，system/blockMeshDict中的几何体(0 1 2 3 4 5 6 7)结点ID顺序为“右手向上”，几何面(0 1 2 3)结点ID顺序相邻即可
网格信息：blockMesh的字典文件在system/blockMeshDict，网格文件在constant/polyMesh；snappyHexMesh(SHM)的字典文件在system/snappyHexMeshDict，网格文件在constant/triSurface
    1 snappyHexMeshDict中包括：几何信息geometry，网格加密信息castellatedMeshControls，网格贴合几何体信息snapControls，几何体网格边界层信息addLayersControls，网格质量检查信息meshQualityControls
    2 几何文件（stl）在constant/triSurface中
    3 snappyHexMesh -overwrite执行之前，一般需要先执行blockMesh
    4 SHM需要设置的信息，一般为：读取stl，设置特征边/面的加密等级，选择需要加边界层的表面和设置层数，其余参数默认即可

针对浮体不同区域进行加密
    将stl手动拆分成多个区域（这个暂时没找到普遍使用的方法，纯手工分区），在stl中加regiones
    这样会导致后面的浮体边界也会分区，只能再改边界

OpenFOAM-7中，尺寸缩放关键字：convertToMeters 0.1;
openFOAM-v1912中，尺寸缩放关键字：scale 0.1;

网格转换
	fluentMeshToFoam -scale 0.01 fluent.msh  //ICEM网格转换
// = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =

// = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
system/controlDict
输出结果控制
    1 writeControl timeStep;
      write Interval 4;  //4个步长保存1次结果
    2 writeControl runTime;
      writeInterval 0.5;  //0.5秒保存1次结果
Courant数，即CFL条件，CFL数，最好小于1，实际计算小于5也可接受
PIMPLE系列中，可使用system/controlDict中的adjustTimeStep，自主调节时间步长（满足maxCo和maxDeltaT）
// = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =

// = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
system/fvSchemes
离散格式设置：1 大部分商业软件求解器版本/2 高精度版本/3 超稳定版本
    ddtSchemes  //时间项离散
    {
        default CrankNicolson 0;  //2 default backward;  //3 default Euler;
    }
    gradSchemes  //梯度项离散
    {
        default cellLimited Gauss linear 0.5;  //2 default Gauss linear;  //3 default cellLimited Gauss linear 1;
        grad(U) cellLimited Gauss linear 1;  //3 grad(U) cellLimited Gauss linear 1;
    }
    divSchemes  //对流项离散
    {
        default none;  //2 default none;  //3 default none;
        div(phi,U) Gauss linearUpwindV grad(U);  //2 div(phi,U) Gauss linear;  //3 div(phi,U) Gauss upwind;
        div(phi,omega) Gauss linearUpwind default;  //2 div(phi,omega) Gauss limitedlinear 1;  //3 div(phi,omega) Gauss upwind;
        div(phi,k) Gauss linearUpwind default;  //2 Gauss limitedLinear 1;  //3 div(phi,k) Gauss upwind;
        div((nuEff*dev(T(grad(U))))) Gauss linear;  //2 div((nuEff*dev(T(grad(U))))) Gauss linear;  //3 div((nuEff*dev(T(grad(U))))) Gauss linear;
    }
    laplacianSchemes  //Laplace项离散
    {
        default Gauss linear limited 1;  //2 default Gauss linear limited 1;  //3 default Gauss linear limited 0.5;
    }
    interpolationSchemes  //由体心值插值面值
    {
        default linear;  //2 default linear;  //3 default linear;
    }
    snGradSchemes  //法向梯度离散
    {
        default limited 1;  //2 default limited 1;  //3 default limited 0.5;
    }
fvScheme中处理湍流问题壁面距离
    wallDist
    {
        method meshWave;
    }
// = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =

// = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
system/fvSolution
求解器设置
    U
    {
        solver smoothSolver;
        smoother symGaussSeidel;
        tolerance 1e-05;
        relTol 0;
    }
    //GAMG：可能需要初始场
    //PCG+DIC：对称系数矩阵
    //PBiCGStab+DILU：非对称系数矩阵
    //smoothSolver+symGaussSeidel：非对称系数矩阵
    SIMPLE
    {
        consistent no;
        nNonOrthogonalCorrectors 1;  //网格非正交校正
    }
    PISO
    {
        momentumPredictor yes;  //动量预测，对于高Re流动适用，可以得到更准确的速度
        nCorrectors 2;  //校正
        nNonOrthogonalCorrectors 1;  //网格非正交校正
    }
    PIMPLE
    {
        momentumPredictor yes;  //动量预测，对于高Re流动适用，可以得到更准确的速度
        nOuterCorrectors 1;  //外层总循环，为1时退化至PISO
        nCorrectors 2;  //校正，若CFL>1，建议nCorrectors>=3
        nNonOrthogonalCorrectors 1;  //网格非正交校正

        pRefCell 0;
        pRefValue 0;  //将pRefCell号单元的压力值设定为pRefValue
    }
// = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =

// = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
system/decomposeParDict
区域分解策略：hierachical,manual,metis,multiLevel,none,scotch,simple,structured
    建议选择scotch，参数最简单，且最小化区域边界网格数目
    分区不恰当，容易导致p_rgh求解奇异，可考虑simple和hierachical来手动分区
1G内存大概可以分解1,000,000网格
并行计算时，需要知道计算机的实际核心数（非超线程的虚拟核心数），lscpu，实际核心数=cores per socket * sockets（自己电脑为2）
// = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =


// = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
补充说明
1 Doxygen，是根据OpenFOAM源代码提取的注释文件，做成的OpenFOAM说明
2 网格质量依据：正交性orthogonality，倾斜度skewness，纵横比aspect ratio，膨胀率smoothness
3 MRF-Multiple Reference Frame多重参考系,LTS-Local Time Step
4 OpenFOAM中fvCFD.H文件是一个非常大的框架，包含了大部分的基本的类型
5 log文件：ExecutionTime指的是elapsed CPU time，ClockTime指的是elapsed wall clock time
// = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =


// = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
将waves2Foam的造波消波功能集成到overInterDyMFoam求解器中，做一个新求解器waveOverInterDyMFoam
1.在overInterDyMFoam基础上修改
    1.0在waveFoam同级别文件夹中，复制overInterDyMFoa文件夹，以此为基础，新建waveOverInterDyMFoam文件夹（位置应该都差不多）
    1.1对比waveFoam和overInterDyMFoam，修改overInterDyMFoam（自主性太强，按实际报错来修改）
        将以下脚本compareFiles.sh复制到waveFoam目录下，授权并执行
************************
#!/bin/bash
list=`ls *C *H`
for i in $list
do
echo "============ BEGIN: "$i" ============"
if [ "$i" == "waveFoam.C" ]
then
diff $i $FOAM_APP/solvers/multiphase/interFoam/overInterDyMFoam/overInterDyMFoam.C
else
diff $i $FOAM_APP/solvers/multiphase/interFoam/overInterDyMFoam/$i
fi
echo
echo "============= END: "$i" ============="
echo
done
************************
        chmod a+x compareFiles.sh
        ./compareFiles.sh
    1.2这里存在一个问题：定义重力向量与createFields.H的顺序
2.修改Make/options
    链接库文件（有问题）
************************
    -I$(FOAM_SOLVERS)/multiphase/VoF \
    -DOFVERSION=1912 \
    -DEXTBRANCH=0 \
    -DOFPLUSBRANCH=1 \
    -DXVERSION=$(WAVES_XVERSION) \
    -I$(WAVES_SRC)/waves2Foam/lnInclude \
    -I$(WAVES_SRC)/waves2FoamSampling/lnInclude \
    -I$(WAVES_GSL_INCLUDE)
    -L$(WAVES_LIBBIN) \
    -lOceanWave3D \
    -Lwaves2Foam \
    -Lwaves2FoamSampling \
    -lwaves2FoamProcessing \
    -L$(WAVES_GSL_LIB) \
    -lgsl \
    -lgslcblas
由于命名冲突，删除掉原本的waveModel链接：-lwaveModels
************************
3.修改Make/files
    可执行文件
************************
waveOverInterDyMFoam.C
EXE = $(FOAM_APPBIN)/waveOverInterDyMFoam
************************
source waves2Foam/bin/bashrc
wmake
注意：
waves2Foam和OF1912自带的造波模块的边界名称冲突，想办法修改waves2Foam的边界名称
自主性很强，随机应变吧！
// = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =


//xiezhuoyu
//mechanics_xzy@163.com
